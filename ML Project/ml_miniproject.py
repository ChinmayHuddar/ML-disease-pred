# -*- coding: utf-8 -*-
"""ML_miniproject.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FkfB7ZweQjEgz6NOcOtQRPZUT3vQsq8Y
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
from sklearn.preprocessing import LabelEncoder, StandardScaler
import warnings
warnings.filterwarnings("ignore")

df = pd.read_csv('/content/patients.csv')









df['Height '] = df['Height ']/100

df['BMI'] = df['Weight']/pow(df['Height '],2)





#BMI
def categorize_BMI(bmi):
    if bmi < 18.5:
        return 'Underweight'
    elif bmi >= 18.5 and bmi < 26.5:
        return 'Normal'
    elif bmi >= 26.5 and bmi < 29.5:
        return 'Overweight'
    else:
        return 'Obese'
df['BMI_Category'] = df.apply(lambda x: categorize_BMI(x['BMI']), axis=1)

#Blood Pressure
df[['Systolic BP','Diastolic BP']] = df['Blood Pressure (mmHg)'].str.split("/",expand=True)
df.drop('Blood Pressure (mmHg)', axis=1, inplace=True)
def categorize_blood_pressure(systolic, diastolic):
    if int(systolic) >= 115 or int(diastolic) >= 90:
        return 'High'
    elif int(systolic) < 90 or int(diastolic) < 70:
        return 'Low'
    else:
        return 'Normal'
df['BP_Category'] = df.apply(lambda x: categorize_blood_pressure(x['Systolic BP'], x['Diastolic BP']), axis=1)

#Cholesterol
def categorize_cholesterol(cholesterol):
    if cholesterol >= 220:
        return 'High'
    elif cholesterol < 160:
        return 'Low'
    else:
        return 'Normal'
df['Cholesterol_Category'] = df.apply(lambda x: categorize_cholesterol(x['Cholesterol Level (mg/dl)']), axis=1)










features = df.filter(['Age', 'Gender', 'Disease','Cough','Fatigue','Difficulty Breathing','BP_Category', 'Cholesterol_Category', 'BMI_Category'])
categorical_features = features.select_dtypes(include=['object']).columns
numerical_features = features.select_dtypes(include=['int64', 'float64']).columns
print("\nCategorical Features:", categorical_features)
print("\nNumerical Features:", numerical_features)

label_encoder = LabelEncoder()
for feature in categorical_features:
    features[feature] = label_encoder.fit_transform(features[feature])

X = features
y = df['Outcome Variable']


scaler_x = StandardScaler()
X = scaler_x.fit_transform(X)

from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.metrics import f1_score, precision_score, recall_score, accuracy_score
from sklearn.ensemble import RandomForestClassifier

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0)
# X_tr, X_val, y_tr, y_val = train_test_split(X_train, y_train, test_size = 0.25, random_state = 0)

cv_params = {'n_estimators' : [50,100],
              'max_depth' : [10,50],
              'min_samples_leaf' : [0.5,1],
              'min_samples_split' : [0.001, 0.01],
              'max_features' : ["sqrt"],
              'max_samples' : [.5,.9]}

rf = RandomForestClassifier(random_state=0)
rf_val = GridSearchCV(rf, cv_params, refit='f1', n_jobs = -1, verbose = 1)
rf_val.fit(X_train, y_train)

rf_val.best_params_

rf_opt = RandomForestClassifier(n_estimators = 50, max_depth = 10,
                                min_samples_leaf = 1, min_samples_split = 0.001,
                                max_features="sqrt", max_samples = 0.9, random_state = 0)
rf_opt.fit(X_train, y_train)

y_pred = rf_opt.predict(X_test)

pc_test1 = precision_score(y_test, y_pred, pos_label = "Positive")
rc_test1 = recall_score(y_test, y_pred, pos_label = "Positive")
ac_test1 = accuracy_score(y_test, y_pred)
f1_test1 = f1_score(y_test, y_pred, pos_label = "Positive")











test1 = pd.DataFrame(columns=['Age', 'Gender', 'Height', 'Weight', 'Blood Pressure', 'Cholesterol','Disease', 'Cough', 'Fatigue', 'Difficulty Breathing'])




test1 = test1._append({'Age': age, 'Gender': gender, 'Height': height, 'Weight': weight, 'Blood Pressure': blood_pressure, 'Cholesterol': cholesterol, 'Disease': disease, 'Cough': cough, 'Fatigue': fatigue, 'Difficulty Breathing': difficulty_breathing}, ignore_index=True)



# Data Transformation and Preprocessing
test1[['Systolic BP','Diastolic BP']] = test1['Blood Pressure'].str.split("/",expand=True)
test1.drop('Blood Pressure', axis=1, inplace=True)
test1['Height'] = test1['Height']/100
test1['BMI'] = test1['Weight']/pow(test1['Height'],2)
test1.drop('Height', axis=1, inplace=True)
test1.drop('Weight', axis=1, inplace=True)
test1['BP_Category'] = test1.apply(lambda x: categorize_blood_pressure(x['Systolic BP'], x['Diastolic BP']), axis=1)
test1['Cholesterol_Category'] = test1.apply(lambda x: categorize_cholesterol(x['Cholesterol']), axis=1)
test1['BMI_Category'] = test1.apply(lambda x: categorize_BMI(x['BMI']), axis=1)
test1.drop('Cholesterol', axis=1, inplace=True)
test1.drop('Systolic BP', axis=1, inplace=True)
test1.drop('Diastolic BP', axis=1, inplace=True)
test1.drop('BMI', axis=1, inplace=True)
features1 = test1.filter(['Age','Gender', 'Disease','Cough','Fatigue','Difficulty Breathing','BP_Category', 'Cholesterol_Category', 'BMI_Category'])
label_encoder = LabelEncoder()
for feature in features1:
    features1[feature] = label_encoder.fit_transform(features1[feature])

print("The patient tested ",rf_opt.predict(features1), " for ", test1.at[0,'Disease'])
print("BMI Level: ", test1.at[0, 'BMI_Category'])
print("Blood Pressure Level: ", test1.at[0, 'BP_Category'])
print("Cholesterol Level: ", test1.at[0, 'Cholesterol_Category'])